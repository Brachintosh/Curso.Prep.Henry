En un archivo de texto separado que debes crear, escribe explicaciones de
los siguientes conceptos como si se lo estuvieras explicando a un niño de 12 años.
Hacer esto te ayudará a descubrir rápidamente cualquier agujero en tu comprensión.

- CLASES - 
        En informática, una clase es una plantilla para la creación de objetos de datos
        según un modelo predefinido.
        Las clases se utilizan para representar entidades o conceptos, asi como usamos
        los sustantivos en nuestro lenguaje.

        class       objects
        CAR         Audi, Ford, Chevrolet,[...]

        Las clases comparten gran parte de la misma funcionalidad que los objetos
        normales, pero también se expande mucho en esa funcionalidad.

- prototype -
    Todos los objetos en JavaScript tienen una referencia a otro objeto, llamado "proto".
    Cada objeto que es creado en JS tiene sus propias propiedades, pero a su vez tiene
    definido un proto(que puede ser cualquier otro).

    objeto1 tiene propiedades1 y propiedades2 definidas al crearlo, si yo solicito una otra
    propiedad, propiedad3 va a ser proto{}.
    Si esta propiedad no está en el prototipo, JavaScript tira error.

Usando "prototype" se puede agregar una función() a un objeto.
Se declara una función que queremos aplicar a determinado/s objeto/s.
Se agrega ésta nueva función() a la base de "prototype" del objeto deseado.

    function Persona(edad) {
        this.edad = edad;
    }
    Persona.prototype.getEdad = function() {
        return 'Tiene: ' + this.edad + 'años.';
    }
    var obj = new Persona(22);
    obj.getEdad()  //   Tiene 22 años.

    Al crear una función para esta clase ("persona"), todos los objetos que hayan sido creados
    en ésta clase, van a compartir la función que se agregó en "prototype".

    obj.__proto__  //   Persona{getEdad:[function]}
    

- Constructors (de Clases) -
        Hay una convención que dice que todas las funciones Constructoras de Clases
        tienen que empezar con letra Mayúscula.

        ejemplo.

    function Persona() {
        this.nombre = 'Juan';
        this.apellido = 'Perez';
    }
    var juan = new Persona();
    console.log(juan)  // Juan Perez

    -Keyword "new"-
    "new" realiza tres pasos en tam solo una linea de código.
    Crea un objeto vacío para empezar a trabajar en él.
    Mediante ".bind", el this de la función car(), en este caso, tiene que ser objeto.
    Finalmente, retorna el objeto creado.

    var objeto = { };
    Car('Audi', 'rojo', 1500).bind(objeto);
    return objeto;

    -Default Operator-
    Una opción a tener para que nuestra clase tenga como predeterminado una respuesta,
    si no tiene contenido al crear un nuevo objeto de esta clase. Dejando dos opciones
    asentadas en la clase al crearla.
    // si "a" es true, entonces "a".
    // si "a" es false, entonces "b".

    function Persona(nombre, apellido, edad) {
        this.nombre = nombre || 'Juan';
        this.apellido = apellido || 'Perez';
        this.edad = edad || 33;
    }
    var 'bracha' = new Persona(Brian, Bedendo, 30);
    var 'toni' = new Persona(Antonio, Tralice, 31);
    var 'maty' = new Persona(Matias, Lopez, 22);
